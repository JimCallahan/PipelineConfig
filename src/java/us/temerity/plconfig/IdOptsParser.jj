options {
  STATIC = false;
}

PARSER_BEGIN(IdOptsParser)

package us.temerity.plconfig;

import java.util.*;
import java.util.logging.*;
import java.text.*;
import java.io.*;
import java.net.*;

/*------------------------------------------------------------------------------------------*/
/*   I D   O P T S   P A R S E R                                                            */
/*                                                                                          */
/*    The parser for the plid(1) host harware ID tool.                                      */
/*------------------------------------------------------------------------------------------*/

public class 
IdOptsParser
{
  /*----------------------------------------------------------------------------------------*/
  /*   A C C E S S                                                                          */
  /*----------------------------------------------------------------------------------------*/

  /** 
   * Set the application instance. 
   */ 
  public void 
  setApp
  (
   IdApp app  
  ) 
  {
    if(app == null) 
      throw new IllegalArgumentException("The application cannot be (null)!");
    pApp = app;
  }


  /*----------------------------------------------------------------------------------------*/
  /*   I N T E R N A L S                                                                    */
  /*----------------------------------------------------------------------------------------*/

  /**
   * The application instance. 
   */
  private IdApp  pApp;

}


PARSER_END(IdOptsParser)

<DEFAULT> 
TOKEN :
{       
  /* information options */ 
  <HELP:                 "--help">         		    
| <HTML_HELP:      	 "--html-help">    		    
| <VERSION:        	 "--version">      		    
| <RELEASE_DATE:   	 "--release-date"> 		    
| <COPYRIGHT:      	 "--copyright">    		    
| <LICENSE:      	 "--license">    		    
			 						    
  /* global options */				    
| <APPEND:       	 "--append">      : PATH_SEP    
			 		
  /* seperators */ 
| <WS1: ([" ","\t"])+> 

  /* errors */ 
| <UNKNOWN_OPTION:  "-" ("-")? (~[" ","\t","="])*>  : IGNORE_STATE
| <UNKNOWN_COMMAND: ~["-"," ","\t"] (~[" ","\t"])*> : IGNORE_STATE
}


/* common states */ 
<IGNORE_STATE> 
TOKEN :
{
  <IGNORED: (~[])+>
}


/* filesystem path arguments */ 
<PATH_SEP> 
TOKEN :
{
  <EQ1:                "=">   : PATH_STATE
| <MISSING_PATH_ARG: ~["="]>  : IGNORE_STATE
}

<PATH_STATE> 
TOKEN :
{
  <PATH_ARG:       ("/")* ("../")* <PATH_ARG_COMP> 
		     ("/" (".." | (<PATH_ARG_COMP>)+)?)*>      : DEFAULT
| <#PATH_ARG_COMP: (["a"-"z","A"-"Z","0"-"9","_","-","."])*>
| <MISSING_PATH:   [" ","\t"]>                                 : IGNORE_STATE
| <ILLEGAL_PATH:   (~[" ","\t"])+>                             : IGNORE_STATE
}


/*------------------------------------------------------------------------------------------*/
/*   T O P   L E V E L                                                                      */
/*------------------------------------------------------------------------------------------*/

void
CommandLine()
  throws IllegalConfigException :
{}
{
  (InformationOpts() | Commands()) <EOF>
  {}
}


void 
Commands() 
  throws IllegalConfigException :
{}   
{
  (GlobalOpts() WS())*
  {}
}
    


/*------------------------------------------------------------------------------------------*/
/*   I N F O R M A T I O N   O P T I O N S                                                  */
/*------------------------------------------------------------------------------------------*/

void
InformationOpts() :
{}
{
  (Help() | HtmlHelp() | Version() | ReleaseDate() | Copyright() | License())
  {
    System.exit(0);
  }
}

void
Help() : 
{}
{
  <HELP> WS()
  { 
    pApp.help(); 
  }
}

void
HtmlHelp() : 
{}
{
  <HTML_HELP> WS()
  { 
    pApp.htmlHelp(); 
  }
}

void
Version() :
{}
{
  <VERSION> WS()
  { 
    pApp.version(); 
  }
}

void
ReleaseDate() :
{}
{
  <RELEASE_DATE> WS()
  { 
    pApp.releaseDate(); 
  }
}

void
Copyright() :
{}
{
  <COPYRIGHT> WS() 
  { 
    pApp.copyright(); 
  }
}

void
License() :
{}
{
  <LICENSE> WS() 
  { 
    pApp.license(); 
  }
}



/*------------------------------------------------------------------------------------------*/
/*   G L O B A L   O P T I O N S                                                            */
/*------------------------------------------------------------------------------------------*/

void
GlobalOpts()
  throws IllegalConfigException :
{}
{
  Append()
  {}
}

void
Append() 
  throws IllegalConfigException :
{
  Token t;
}
{
  <APPEND> EQ() t=<PATH_ARG>
  { 
    pApp.setHostIDs(new File(t.image));
  }
}


/*------------------------------------------------------------------------------------------*/
/*   S H A R E D   T O K E N S                                                              */
/*------------------------------------------------------------------------------------------*/

Token
WS() :
{
  Token t;
}
{
  (t=<WS1>)
  { 
    return t; 
  }
}


Token
EQ() :
{
  Token t;
}
{
  (t=<EQ1>)
  { 
    return t; 
  }
}
