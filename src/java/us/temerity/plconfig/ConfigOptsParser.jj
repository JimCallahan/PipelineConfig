options {
  STATIC = false;
}

PARSER_BEGIN(ConfigOptsParser)

package us.temerity.plconfig;

import java.util.*;
import java.util.logging.*;
import java.text.*;
import java.io.*;
import java.net.*;

/*------------------------------------------------------------------------------------------*/
/*   C O N F I G   O P T S   P A R S E R                                                    */
/*                                                                                          */
/*    The parser for the plconfig(1) Pipeline site configuration tool.                      */
/*------------------------------------------------------------------------------------------*/

public class 
ConfigOptsParser
{
  /*----------------------------------------------------------------------------------------*/
  /*   A C C E S S                                                                          */
  /*----------------------------------------------------------------------------------------*/

  /** 
   * Set the application instance. 
   */ 
  public void 
  setApp
  (
   ConfigApp app  
  ) 
  {
    if(app == null) 
      throw new IllegalArgumentException("The application cannot be (null)!");
    pApp = app;
  }


  /*----------------------------------------------------------------------------------------*/
  /*   I N T E R N A L S                                                                    */
  /*----------------------------------------------------------------------------------------*/

  /**
   * The application instance. 
   */
  private ConfigApp  pApp;

}


PARSER_END(ConfigOptsParser)

<DEFAULT> 
TOKEN :
{       
  /* information options */ 
  <HELP:                 "--help">         		    
| <HTML_HELP:      	 "--html-help">    		    
| <VERSION:        	 "--version">      		    
| <RELEASE_DATE:   	 "--release-date"> 		    
| <COPYRIGHT:      	 "--copyright">    		    
			 						    
  /* global options */	
| <BATCH:                "--batch"> 
			    
| <EVALUATION:     	 "--evaluation">   		    
| <LIMITED:         	 "--limited">	        : DATE_SEP  		    
| <PERPETUAL:      	 "--perpetual">	   	    
		
| <SERVER_HOST:          "--server-host">       : HOSTNAME_SEP
| <ROOT_DIR:       	 "--root-dir">          : PATH_SEP      
| <HOST_IDS:         	 "--host-ids">          : PATH_SEP
   
| <RECONFIG:         	 "--reconfig">          : PATH_SEP
  
| <HOME_DIR:       	 "--home-dir">          : PATH_SEP    
| <TEMP_DIR:             "--temp-dir">          : PATH_SEP
| <UNIX_JAVA_HOME:       "--unix-java-home">    : PATH_SEP  

| <MASTER_HOST:          "--master-host">       : HOSTNAME_SEP
| <MASTER_PORT:          "--master-port">       : INTEGER_SEP
| <MASTER_HEAP_SIZE:     "--master-heap-size">  : BYTE_SIZE_SEP
| <NODE_DIR:             "--node-dir">          : PATH_SEP

| <FILE_HOST:            "--file-host">         : HOSTNAME_SEP
| <FILE_PORT:            "--file-port">         : INTEGER_SEP
| <FILE_HEAP_SIZE:       "--file-heap-size">    : BYTE_SIZE_SEP
| <PROD_DIR:             "--prod-dir">          : PATH_SEP

| <QUEUE_HOST:           "--queue-host">        : HOSTNAME_SEP
| <QUEUE_PORT:           "--queue-port">        : INTEGER_SEP
| <QUEUE_HEAP_SIZE:      "--queue-heap-size">   : BYTE_SIZE_SEP
| <JOB_PORT:             "--job-port">          : INTEGER_SEP
| <QUEUE_DIR:            "--queue-dir">         : PATH_SEP

| <PLUGIN_HOST:          "--plugin-host">       : HOSTNAME_SEP
| <PLUGIN_PORT:          "--plugin-port">       : INTEGER_SEP

| <PIPELINE_USER:        "--pipeline-user">     : USERNAME_SEP
| <PIPELINE_GROUP:       "--pipeline-group">    : USERNAME_SEP
   
| <MAC_SUPPORT:       	 "--mac-support">   
| <MAC_ROOT_DIR:       	 "--mac-root-dir">      : PATH_SEP 
| <MAC_PROD_DIR:         "--mac-prod-dir">      : PATH_SEP
| <MAC_HOME_DIR:       	 "--mac-home-dir">      : PATH_SEP  
| <MAC_TEMP_DIR:         "--mac-temp-dir">      : PATH_SEP
   		    
| <WIN_SUPPORT:       	 "--win-support">  
| <WIN_ROOT_DIR:       	 "--win-root-dir">      : WIN_PATH_SEP 
| <WIN_PROD_DIR:         "--win-prod-dir">      : WIN_PATH_SEP
| <WIN_TEMP_DIR:         "--win-temp-dir">      : WIN_PATH_SEP 
| <WIN_JAVA_HOME:        "--win-java-home">     : WIN_PATH_SEP

| <WIN_USER_PROFILE_DIR:          "--win-user-profile-dir"> : WIN_PATH_SEP  
| <WIN_USER_PROFILE_NO_USERNAME:  "--win-user-profile-no-username">  
| <WIN_APP_DATA_DIR:              "--win-app-data-dir">     : WIN_PATH_SEP  
| <WIN_APP_DATA_NO_USERNAME:      "--win-app-data-no-unsername">  

| <LEGACY_PLUGINS:   	 "--legacy-plugins">	
| <LOCAL_VENDOR:   	 "--local-vendor">      : VENDORNAME_SEP 

  /* seperators */ 
| <AE1: (["\0"])+> 

  /* errors */ 
| <UNKNOWN_OPTION:  "-" ("-")? (~["\0","="])*>  : IGNORE_STATE
| <UNKNOWN_COMMAND: ~["-","\0"] (~["\0"])*>     : IGNORE_STATE
}


/* common states */ 
<IGNORE_STATE> 
TOKEN :
{
  <IGNORED: (~[])+>
}


/* integer arguments */ 
<INTEGER_SEP> 
TOKEN :
{
  <EQ1:                   "=">   : INTEGER_STATE
| <MISSING_INTEGER_ARG: ~["="]>  : IGNORE_STATE
}

<INTEGER_STATE> 
TOKEN :
{
  <INTEGER:         (["0"-"9"])+>  : DEFAULT
| <MISSING_INTEGER: ["\0"]>        : IGNORE_STATE
| <ILLEGAL_INTEGER: (~["\0"])+>    : IGNORE_STATE
}


/* filesystem path arguments */ 
<PATH_SEP> 
TOKEN :
{
  <EQ2:                "=">   : PATH_STATE
| <MISSING_PATH_ARG: ~["="]>  : IGNORE_STATE
}

<PATH_STATE> 
TOKEN :
{
  <PATH_ARG:       ("/")? <PATH_ARG_COMP> 
                     ("/" <PATH_ARG_COMP>)*>                   : DEFAULT
| <#PATH_ARG_COMP: (["a"-"z","A"-"Z","0"-"9","_","-","."])*>
| <MISSING_PATH:   ["\0"]>                                     : IGNORE_STATE
| <ILLEGAL_PATH:   (~["\0"])+>                                 : IGNORE_STATE
}

/* Windows filesystem path arguments */ 
<WIN_PATH_SEP> 
TOKEN :
{
  <EQ7:                    "=">   : WIN_PATH_STATE
| <MISSING_WIN_PATH_ARG: ~["="]>  : IGNORE_STATE
}

<WIN_PATH_STATE> 
TOKEN :
{
  <WIN_PATH_ARG:       ("/" | (["a"-"z","A"-"Z"] ":")) "/" <WIN_PATH_ARG_COMP> 
	  	         ("/" <WIN_PATH_ARG_COMP>)*>                 : DEFAULT
| <#WIN_PATH_ARG_COMP: (["a"-"z","A"-"Z","0"-"9","_","-","."])*>
| <MISSING_WIN_PATH:   ["\0"]>                                        : IGNORE_STATE
| <ILLEGAL_WIN_PATH:   (~["\0"])+>                                    : IGNORE_STATE
}

/* search path arguments */ 
<SEARCH_PATH_SEP> 
TOKEN :
{
  <EQ3:                       "=">   : SEARCH_PATH_STATE
| <MISSING_SEARCH_PATH_ARG: ~["="]>  : IGNORE_STATE
}

<SEARCH_PATH_STATE> 
TOKEN :
{
  <SEARCH_PATH_ARG:       <SEARCH_PATH_DIR> ((":") <SEARCH_PATH_DIR>)*>  : DEFAULT
| <#SEARCH_PATH_DIR:      ("/")? <SEARCH_PATH_COMP> 
		            ("/" <SEARCH_PATH_COMP>)*>         
| <#SEARCH_PATH_COMP:     (["a"-"z","A"-"Z","0"-"9","_","-","."])*>
| <MISSING_SEARCH_PATH:   ["\0"]>                                        : IGNORE_STATE
| <ILLEGAL_SEARCH_PATH:   (~["\0"])+>                                    : IGNORE_STATE
}


/* hostname arguments */ 
<HOSTNAME_SEP> 
TOKEN :
{
  <EQ4:                    "=">   : HOSTNAME_STATE
| <MISSING_HOSTNAME_ARG: ~["="]>  : IGNORE_STATE
}

<HOSTNAME_STATE> 
TOKEN :
{
  <HOSTNAME:         ((["a"-"z","A"-"Z","0"-"9","-"])+ 
		      ("." (["a"-"z","A"-"Z","0"-"9","-"])+)*)>   : DEFAULT
| <MISSING_HOSTNAME: ["\0"]>                                      : IGNORE_STATE
| <ILLEGAL_HOSTNAME: (~["\0"])+>                                  : IGNORE_STATE
}


/* username arguments */ 
<USERNAME_SEP> 
TOKEN :
{
  <EQ5:                    "=">   : USERNAME_STATE
| <MISSING_USERNAME_ARG: ~["="]>  : IGNORE_STATE
}

<USERNAME_STATE> 
TOKEN :
{
  <USERNAME:         ((["a"-"z","A"-"Z"])+ 
		      (["a"-"z","A"-"Z","0"-"9"])*)>   : DEFAULT
| <MISSING_USERNAME: ["\0"]>                           : IGNORE_STATE
| <ILLEGAL_USERNAME: (~["\0"])+>                       : IGNORE_STATE
}


/* vendorname arguments */ 
<VENDORNAME_SEP> 
TOKEN :
{
  <EQ9:                      "=">   : VENDORNAME_STATE
| <MISSING_VENDORNAME_ARG: ~["="]>  : IGNORE_STATE
}

<VENDORNAME_STATE> 
TOKEN :
{
  <VENDORNAME:         ((["a"-"z","A"-"Z","0"-"9","-","_","."])+)>   : DEFAULT
| <MISSING_VENDORNAME: ["\0"]>                           : IGNORE_STATE
| <ILLEGAL_VENDORNAME: (~["\0"])+>                       : IGNORE_STATE
}

/* byte size arguments */ 
<BYTE_SIZE_SEP> 
TOKEN :
{
  <EQ6:                     "=">   : BYTE_SIZE_STATE
| <MISSING_BYTE_SIZE_ARG: ~["="]>  : IGNORE_STATE
}

<BYTE_SIZE_STATE> 
TOKEN :
{
  <BYTE_SIZE:         (["0"-"9"])+>   
| <KILO:              ["k","K"]>                      : DEFAULT
| <MEGA:              ["m","M"]>                      : DEFAULT
| <GIGA:              ["g","G"]>                      : DEFAULT
| <MISSING_BYTE_SIZE: ["\0"]>                         : IGNORE_STATE
| <ILLEGAL_BYTE_SIZE: (~["k","K","m","M","g","G"])+>  : IGNORE_STATE
}


/* date arguments */ 
<DATE_SEP> 
TOKEN :
{
  <EQ8:                "=">   : YEAR_STATE
| <MISSING_DATE_ARG: ~["="]>  : IGNORE_STATE
}

<YEAR_STATE> 
TOKEN :
{
  <YEAR:             ("20" ["0"-"9"] ["0"-"9"])>  
| <DASH1:            "-">                         : MONTH_STATE 
| <MISSING_YEAR:     ["\0"]>                      : IGNORE_STATE
| <ILLEGAL_YEAR:     (~["\0"])+>                  : IGNORE_STATE
}

<MONTH_STATE> 
TOKEN :
{
  <MONTH:            (["0"-"1"] ["0"-"9"])>  
| <DASH2:            "-">                    : DAY_STATE 
| <MISSING_MONTH:    ["\0"]>                 : IGNORE_STATE
| <ILLEGAL_MONTH:    (~["-","\0"])+>         : IGNORE_STATE
}

<DAY_STATE> 
TOKEN :
{
  <DAY:             (["0"-"3"] ["0"-"9"])>  : DEFAULT
| <MISSING_DAY:     ["\0"]>                 : IGNORE_STATE
| <ILLEGAL_DAY:     (~["-","\0"])+>         : IGNORE_STATE
}



/*------------------------------------------------------------------------------------------*/
/*   T O P   L E V E L                                                                      */
/*------------------------------------------------------------------------------------------*/

void
CommandLine()
  throws IllegalConfigException :
{}
{
  (InformationOpts() | Commands()) <EOF>
  {}
}


void 
Commands() 
  throws IllegalConfigException :
{}   
{
  (GlobalOpts() AE())*
  {}
}
    


/*------------------------------------------------------------------------------------------*/
/*   I N F O R M A T I O N   O P T I O N S                                                  */
/*------------------------------------------------------------------------------------------*/

void
InformationOpts() :
{}
{
  (Help() | HtmlHelp() | Version() | ReleaseDate() | Copyright())
  {
    System.exit(0);
  }
}

void
Help() : 
{}
{
  <HELP> AE()
  { 
    pApp.help(); 
  }
}

void
HtmlHelp() : 
{}
{
  <HTML_HELP> AE()
  { 
    pApp.htmlHelp(); 
  }
}

void
Version() :
{}
{
  <VERSION> AE()
  { 
    pApp.version(); 
  }
}

void
ReleaseDate() :
{}
{
  <RELEASE_DATE> AE()
  { 
    pApp.releaseDate(); 
  }
}

void
Copyright() :
{}
{
  <COPYRIGHT> AE() 
  { 
    pApp.copyright(); 
  }
}



/*------------------------------------------------------------------------------------------*/
/*   G L O B A L   O P T I O N S                                                            */
/*------------------------------------------------------------------------------------------*/

void
GlobalOpts()
  throws IllegalConfigException :
{}
{
  (Batch() | Evaluation() | Limited() | Perpetual() | RootDir() | ServerHost() | HostIDs() | 
   Reconfig() | HomeDir() | TempDir() | UnixJavaHome() | 
   MasterHost() | MasterPort() | MasterHeapSize() | NodeDir() | 
   FileHost() | FilePort() | FileHeapSize()  |ProdDir() | 
   QueueHost() | QueuePort() | QueueHeapSize() | JobPort() | QueueDir() | 
   PluginHost() | PluginPort() | LegacyPlugins() | LocalVendor() |
   PipelineUser() | PipelineGroup() |
   MacSupport() | MacRootDir() | MacProdDir() | MacHomeDir() | MacTempDir() |
   WinSupport() | WinRootDir() | WinProdDir() | WinTempDir() | WinJavaHome() |
   WinUserProfileDir() | WinUserProfileNoUsername() |
   WinAppDataDir() | WinAppDataNoUsername())
  {}
}


/*------------------------------------------------------------------------------------------*/

void
Batch() 
  throws IllegalConfigException :
{
  Token t;
}
{
  <BATCH> 
  { 
    pApp.setBatchMode();
  }
}


/*------------------------------------------------------------------------------------------*/

void
HostIDs()
  throws IllegalConfigException :
{
  Token t;
}
{
  <HOST_IDS> EQ() t=<PATH_ARG>
  { 
    pApp.readHostIDs(new File(t.image));
  }
}



/*------------------------------------------------------------------------------------------*/

void
Reconfig() 
  throws IllegalConfigException :
{
  Token t;
}
{
  <RECONFIG> EQ() t=<PATH_ARG>
  { 
    pApp.readReconfig(new File(t.image));
  }
}


/*------------------------------------------------------------------------------------------*/

void
Evaluation() 
  throws IllegalConfigException :
{
  Token t;
}
{
  <EVALUATION> 
  { 
    pApp.setEvaluationLicense();
  }
}

void
Limited() 
  throws IllegalConfigException :
{
  Token t;
  int year, month, day;
}
{
  <LIMITED> EQ() year=Year() DASH() month=Month() DASH() day=Day() 
  { 
    if(year < 2006)
      throw new IllegalArgumentException
	("The year must be at least (2006)!"); 

    if((month < 1) || (month > 12)) 
      throw new IllegalArgumentException
	("The month of the year must be in the [1, 12] range!");
    month -= 1;

    if(day < 1)
      throw new IllegalArgumentException
	("The day of the month must be at least (1)."); 

    switch(month) {
    case 1:
      if(day > 28) 
	throw new IllegalArgumentException
	  ("The day of the month must be in the [1, 28] range!");
      break;

    case 3:
    case 5:
    case 8:
    case 10:
      if(day > 28) 
	throw new IllegalArgumentException
	  ("The day of the month must be in the [1, 30] range!");
      break;

    default:
      if(day > 28) 
	throw new IllegalArgumentException
	  ("The day of the month must be in the [1, 31] range!");
    }

    Calendar cal = new GregorianCalendar();
    cal.set(year, month, day);
    pApp.setLimitedLicense(cal.getTime());
  }
}

int
Month() 
  throws IllegalConfigException :
{
  Token t;
}
{
  t=<MONTH>
  {
    try {
      return Integer.parseInt(t.image);
    }
    catch(NumberFormatException ex) {
      throw new ParseException
	("Illegal Month value (" + t.image + ")!");
    }
  }
}

int
Day() 
  throws IllegalConfigException :
{
  Token t;
}
{
  t=<DAY>
  {
    try {
      return Integer.parseInt(t.image);
    }
    catch(NumberFormatException ex) {
      throw new ParseException
	("Illegal Day value (" + t.image + ")!");
    }
  }
}

int
Year() 
  throws IllegalConfigException :
{
  Token t;
}
{
  t=<YEAR>
  {
    try {
      return Integer.parseInt(t.image);
    }
    catch(NumberFormatException ex) {
      throw new ParseException
	("Illegal Year value (" + t.image + ")!");
    }
  }
}


void
Perpetual() 
  throws IllegalConfigException :
{
  Token t;
}
{
  <PERPETUAL> 
  { 
    pApp.setPerpetualLicense();
  }
}


/*------------------------------------------------------------------------------------------*/

void
RootDir() 
  throws IllegalConfigException :
{
  Token t;
}
{
  <ROOT_DIR> EQ() t=<PATH_ARG>
  { 
    pApp.setRootDirectory(new File(t.image));
  }
}

void
ServerHost() :
{
  Token t;
}
{
  <SERVER_HOST> EQ() t=<HOSTNAME>
  { 
    pApp.setServerHostname(t.image);
  }
}


/*------------------------------------------------------------------------------------------*/

void
HomeDir()
  throws IllegalConfigException :
{
  Token t;
}
{
  <HOME_DIR> EQ() t=<PATH_ARG>
  { 
    pApp.setHomeDirectory(new File(t.image));
  }
}

void
TempDir()
  throws IllegalConfigException :
{
  Token t;
}
{
  <TEMP_DIR> EQ() t=<PATH_ARG>
  { 
    pApp.setTemporaryDirectory(new File(t.image));
  }
}

void
UnixJavaHome()
  throws IllegalConfigException :
{
  Token t;
}
{
  <UNIX_JAVA_HOME> EQ() t=<PATH_ARG>
  { 
    pApp.setUnixJavaHome(new File(t.image));
  }
}


/*------------------------------------------------------------------------------------------*/

void
MasterHost() :
{
  Token t;
}
{
  <MASTER_HOST> EQ() t=<HOSTNAME>
  { 
    pApp.setMasterHostname(t.image);
  }
}

void
MasterPort()
  throws IllegalConfigException :
{
  Token t;
}
{
  <MASTER_PORT> EQ() t=<INTEGER>
  { 
    pApp.setMasterPort(new Integer(t.image));
  }
}

void
MasterHeapSize()
  throws IllegalConfigException :
{
  long size;
}
{
  <MASTER_HEAP_SIZE> EQ() size=ByteSize()
  { 
    pApp.setMasterHeapSize(size);
  }
}

void
NodeDir()
  throws IllegalConfigException :
{
  Token t;
}
{
  <NODE_DIR> EQ() t=<PATH_ARG>
  { 
    pApp.setNodeDirectory(new File(t.image));
  }
}


/*------------------------------------------------------------------------------------------*/

void
FileHost() :
{
  Token t;
}
{
  <FILE_HOST> EQ() t=<HOSTNAME>
  { 
    pApp.setFileHostname(t.image);
  }
}

void
FilePort()
  throws IllegalConfigException :
{
  Token t;
}
{
  <FILE_PORT> EQ() t=<INTEGER>
  { 
    pApp.setFilePort(new Integer(t.image));
  }
}

void
FileHeapSize()
  throws IllegalConfigException :
{
  long size;
}
{
  <FILE_HEAP_SIZE> EQ() size=ByteSize()
  { 
    pApp.setFileHeapSize(size);
  }
}

void
ProdDir()
  throws IllegalConfigException :
{
  Token t;
}
{
  <PROD_DIR> EQ() t=<PATH_ARG>
  { 
    pApp.setProdDirectory(new File(t.image));
  }
}


/*------------------------------------------------------------------------------------------*/

void
QueueHost() :
{
  Token t;
}
{
  <QUEUE_HOST> EQ() t=<HOSTNAME>
  { 
    pApp.setQueueHostname(t.image);
  }
}

void
QueuePort()
  throws IllegalConfigException :
{
  Token t;
}
{
  <QUEUE_PORT> EQ() t=<INTEGER>
  { 
    pApp.setQueuePort(new Integer(t.image));
  }
}

void
QueueHeapSize()
  throws IllegalConfigException :
{
  long size;
}
{
  <QUEUE_HEAP_SIZE> EQ() size=ByteSize()
  { 
    pApp.setQueueHeapSize(size);
  }
}

void
JobPort()
  throws IllegalConfigException :
{
  Token t;
}
{
  <JOB_PORT> EQ() t=<INTEGER>
  { 
    pApp.setJobPort(new Integer(t.image));
  }
}

void
QueueDir()
  throws IllegalConfigException :
{
  Token t;
}
{
  <QUEUE_DIR> EQ() t=<PATH_ARG>
  { 
    pApp.setQueueDirectory(new File(t.image));
  }
}


/*------------------------------------------------------------------------------------------*/

void
PluginHost() :
{
  Token t;
}
{
  <PLUGIN_HOST> EQ() t=<HOSTNAME>
  { 
    pApp.setPluginHostname(t.image);
  }
}

void
PluginPort()
  throws IllegalConfigException :
{
  Token t;
}
{
  <PLUGIN_PORT> EQ() t=<INTEGER>
  { 
    pApp.setPluginPort(new Integer(t.image));
  }
}


void
LocalVendor() 
  throws IllegalConfigException :
{
  Token t;
}
{
  <LOCAL_VENDOR> EQ() t=<VENDORNAME>
  { 
    pApp.setLocalVendor(t.image);
  }
}


/*------------------------------------------------------------------------------------------*/

void
PipelineUser() 
  throws IllegalConfigException :
{
  Token t;
}
{
  <PIPELINE_USER> EQ() t=<USERNAME>
  { 
    pApp.setPipelineUser(t.image);
  }
}

void
PipelineGroup() 
  throws IllegalConfigException :
{
  Token t;
}
{
  <PIPELINE_GROUP> EQ() t=<USERNAME>
  { 
    pApp.setPipelineGroup(t.image);
  }
}


/*------------------------------------------------------------------------------------------*/

void
MacSupport() :
{
  Token t;
}
{
  <MAC_SUPPORT> 
  { 
    pApp.setMacSupport(true);
  }
}

void
MacRootDir()
  throws IllegalConfigException :
{
  Token t;
}
{
  <MAC_ROOT_DIR> EQ() t=<PATH_ARG>
  { 
    pApp.setMacRootDirectory(new File(t.image));
  }
}

void
MacProdDir()
  throws IllegalConfigException :
{
  Token t;
}
{
  <MAC_PROD_DIR> EQ() t=<PATH_ARG>
  { 
    pApp.setMacProdDirectory(new File(t.image));
  }
}

void
MacHomeDir()
  throws IllegalConfigException :
{
  Token t;
}
{
  <MAC_HOME_DIR> EQ() t=<PATH_ARG>
  { 
    pApp.setMacHomeDirectory(new File(t.image));
  }
}

void
MacTempDir()
  throws IllegalConfigException :
{
  Token t;
}
{
  <MAC_TEMP_DIR> EQ() t=<PATH_ARG>
  { 
    pApp.setMacTemporaryDirectory(new File(t.image));
  }
}


/*------------------------------------------------------------------------------------------*/

void
WinSupport() :
{
  Token t;
}
{
  <WIN_SUPPORT> 
  { 
    pApp.setWinSupport(true);
  }
}

void
WinRootDir()
  throws IllegalConfigException :
{
  Token t;
}
{
  <WIN_ROOT_DIR> EQ() t=<WIN_PATH_ARG>
  { 
    pApp.setWinRootDirectory(t.image);
  }
}

void
WinProdDir()
  throws IllegalConfigException :
{
  Token t;
}
{
  <WIN_PROD_DIR> EQ() t=<WIN_PATH_ARG>
  { 
    pApp.setWinProdDirectory(t.image);
  }
}

void
WinUserProfileDir()
  throws IllegalConfigException :
{
  Token t;
}
{
  <WIN_USER_PROFILE_DIR> EQ() t=<WIN_PATH_ARG>
  { 
    pApp.setWinUserProfileDirectory(t.image);
  }
}

void
WinUserProfileNoUsername() :
{
  Token t;
}
{
  <WIN_USER_PROFILE_NO_USERNAME> 
  { 
    pApp.setWinUserProfileNeedsUser(false);
  }
}

void
WinAppDataDir()
  throws IllegalConfigException :
{
  Token t;
}
{
  <WIN_APP_DATA_DIR> EQ() t=<WIN_PATH_ARG>
  { 
    pApp.setWinAppDataDirectory(t.image);
  }
}

void
WinAppDataNoUsername() :
{
  Token t;
}
{
  <WIN_APP_DATA_NO_USERNAME> 
  { 
    pApp.setWinAppDataNeedsUser(false);
  }
}

void
WinTempDir()
  throws IllegalConfigException :
{
  Token t;
}
{
  <WIN_TEMP_DIR> EQ() t=<WIN_PATH_ARG>
  { 
    pApp.setWinTemporaryDirectory(t.image);
  }
}

void
WinJavaHome()
  throws IllegalConfigException :
{
  Token t;
}
{
  <WIN_JAVA_HOME> EQ() t=<WIN_PATH_ARG>
  { 
    pApp.setWinJavaHome(t.image);
  }
}


/*------------------------------------------------------------------------------------------*/

long 
ByteSize()
  throws IllegalConfigException :
{
  Token t; 
  long scale = 1L;
}
{
  t=<BYTE_SIZE> (scale=Kilo() | scale=Mega() | scale=Giga())?
  {
    try {
      return Long.parseLong(t.image) * scale;
    }
    catch(NumberFormatException ex) {
      throw new IllegalConfigException(ex.getMessage());
    }
  }
}

long 
Kilo() :
{}
{
  <KILO> 
  {
    return 1024L;
  }
}

long 
Mega() :
{}
{
  <MEGA> 
  {
    return 1048576L;
  }
}

long 
Giga() :
{}
{
  <GIGA> 
  {
    return 1073741824L;
  }
}


/*------------------------------------------------------------------------------------------*/

void
LegacyPlugins() 
  throws IllegalConfigException :
{
  Token t;
}
{
  <LEGACY_PLUGINS> 
  { 
    pApp.setLegacyPlugins(true);
  }
}


/*------------------------------------------------------------------------------------------*/
/*   S H A R E D   T O K E N S                                                              */
/*------------------------------------------------------------------------------------------*/

Token
AE() :
{
  Token t;
}
{
  (t=<AE1>)
  { 
    return t; 
  }
}

Token
DASH() :
{
  Token t;
}
{
  (t=<DASH1> | t=<DASH2>)
  { 
    return t; 
  }
}

Token
EQ() :
{
  Token t;
}
{
  (t=<EQ1> | t=<EQ2> | t=<EQ3> | t=<EQ4> | t=<EQ5> | t=<EQ6> | t=<EQ7> | t=<EQ8> | t=<EQ9>)
  { 
    return t; 
  }
}
