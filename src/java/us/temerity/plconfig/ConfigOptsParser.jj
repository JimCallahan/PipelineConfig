options {
  STATIC = false;
}

PARSER_BEGIN(ConfigOptsParser)

package us.temerity.plconfig;

import java.util.*;
import java.text.*;
import java.io.*;
import java.util.logging.*;

/*------------------------------------------------------------------------------------------*/
/*   F I L E   M G R   O P T S   P A R S E R                                                */
/*                                                                                          */
/*    The parser for the plfilemgr(1) file system manager daemon.                           */
/*------------------------------------------------------------------------------------------*/

public class 
ConfigOptsParser
{
  /*----------------------------------------------------------------------------------------*/
  /*   A C C E S S                                                                          */
  /*----------------------------------------------------------------------------------------*/

  /** 
   * Set the application instance. 
   */ 
  public void 
  setApp
  (
   ConfigApp app  
  ) 
  {
    if(app == null) 
      throw new IllegalArgumentException("The application cannot be (null)!");
    pApp = app;
  }


  /*----------------------------------------------------------------------------------------*/
  /*   I N T E R N A L S                                                                    */
  /*----------------------------------------------------------------------------------------*/

  /**
   * The application instance. 
   */
  private ConfigApp  pApp;

}


PARSER_END(ConfigOptsParser)

<DEFAULT> 
TOKEN :
{       
  /* information options */ 
  <HELP:         "--help">         
| <HTML_HELP:    "--html-help">    
| <VERSION:      "--version">      
| <RELEASE_DATE: "--release-date"> 
| <COPYRIGHT:    "--copyright">    

  /* global options */	
| <ROOT_DIR:     "--root-dir">    : PATH_SEP

| <EVALUATION:   "--evaluation">  
| <ANNUAL:       "--annual">
| <PERPETUAL:    "--perpetual">

| <DOMAIN:       "--domain">      : HOSTNAME_SEP
| <HOME_DIR:     "--home-dir">    : PATH_SEP
| <TOOLSET_DIR:  "--toolset-dir"> : PATH_SEP

| <MASTER_HOST:  "--master-host"> : HOSTNAME_SEP
| <FILE_HOST:    "--file-host">   : HOSTNAME_SEP
| <NODE_DIR:     "--node-dir">    : PATH_SEP

| <MASTER_PORT:  "--master-port"> : INTEGER_SEP
| <FILE_PORT:    "--file-port">   : INTEGER_SEP
| <PROD_DIR:     "--prod-dir">    : PATH_SEP

| <CLASS_PATH:   "--class-path">    : SEARCH_PATH_SEP
| <LIBRARY_PATH: "--library-path">  : SEARCH_PATH_SEP

| <LOCK:         "--lock">


  /* seperators */ 
| <WS1: ([" ","\t"])+> 

  /* errors */ 
| <UNKNOWN_OPTION:  "-" ("-")? (~[" ","\t","="])*>  : IGNORE_STATE
| <UNKNOWN_COMMAND: ~["-"," ","\t"] (~[" ","\t"])*> : IGNORE_STATE
}


/* common states */ 
<IGNORE_STATE> 
TOKEN :
{
  <IGNORED: (~[])+>
}


/* integer arguments */ 
<INTEGER_SEP> 
TOKEN :
{
  <EQ1:                   "=">   : INTEGER_STATE
| <MISSING_INTEGER_ARG: ~["="]>  : IGNORE_STATE
}

<INTEGER_STATE> 
TOKEN :
{
  <INTEGER:         (["0"-"9"])+>    : DEFAULT
| <MISSING_INTEGER: [" ","\t"]>      : IGNORE_STATE
| <ILLEGAL_INTEGER: (~[" ","\t"])+>  : IGNORE_STATE
}


/* filesystem path arguments */ 
<PATH_SEP> 
TOKEN :
{
  <EQ2:                "=">   : PATH_STATE
| <MISSING_PATH_ARG: ~["="]>  : IGNORE_STATE
}

<PATH_STATE> 
TOKEN :
{
  <PATH_ARG:       ("/")* ("../")* <PATH_ARG_COMP> 
		     ("/" (".." | (<PATH_ARG_COMP>)+)?)*>      : DEFAULT
| <#PATH_ARG_COMP: (["a"-"z","A"-"Z","0"-"9","_","-","."])*>
| <MISSING_PATH:   [" ","\t"]>                                 : IGNORE_STATE
| <ILLEGAL_PATH:   (~[" ","\t"])+>                             : IGNORE_STATE
}


/* search path arguments */ 
<SEARCH_PATH_SEP> 
TOKEN :
{
  <EQ3:                 "=">   : SEARCH_PATH_STATE
| <MISSING_SEARCH_PATH_ARG: ~["="]>  : IGNORE_STATE
}

<SEARCH_PATH_STATE> 
TOKEN :
{
  <SEARCH_PATH_ARG:       <SEARCH_PATH_DIR> ((":") <SEARCH_PATH_DIR>)*>  : DEFAULT
| <#SEARCH_PATH_DIR:      ("/")* ("../")* <SEARCH_PATH_COMP> 
		            ("/" (".." | (<SEARCH_PATH_COMP>)+)?)*>         
| <#SEARCH_PATH_COMP:     (["a"-"z","A"-"Z","0"-"9","_","-","."])*>
| <MISSING_SEARCH_PATH:   [" ","\t"]>                                    : IGNORE_STATE
| <ILLEGAL_SEARCH_PATH:   (~[" ","\t"])+>                                : IGNORE_STATE
}


/* hostname arguments */ 
<HOSTNAME_SEP> 
TOKEN :
{
  <EQ4:                    "=">   : HOSTNAME_STATE
| <MISSING_HOSTNAME_ARG: ~["="]>  : IGNORE_STATE
}

<HOSTNAME_STATE> 
TOKEN :
{
  <HOSTNAME:         ((["a"-"z","A"-"Z","0"-"9"])+ 
		      ("." (["a"-"z","A"-"Z","0"-"9"])+)*)>   : DEFAULT
| <MISSING_HOSTNAME: [" ","\t"]>                              : IGNORE_STATE
| <ILLEGAL_HOSTNAME: (~[" ","\t"])+>                          : IGNORE_STATE
}



/*------------------------------------------------------------------------------------------*/
/*   T O P   L E V E L                                                                      */
/*------------------------------------------------------------------------------------------*/

void
CommandLine()
  throws IllegalConfigException :
{}
{
  (InformationOpts() | Commands()) <EOF>
  {}
}


void 
Commands() 
  throws IllegalConfigException :
{}   
{
  (GlobalOpts() WS())*
  {}
}
    


/*------------------------------------------------------------------------------------------*/
/*   I N F O R M A T I O N   O P T I O N S                                                  */
/*------------------------------------------------------------------------------------------*/

void
InformationOpts() :
{}
{
  (Help() | HtmlHelp() | Version() | ReleaseDate() | Copyright())
  {}
}

void
Help() : 
{}
{
  <HELP> WS()
  { 
    pApp.help(); 
  }
}

void
HtmlHelp() : 
{}
{
  <HTML_HELP> WS()
  { 
    pApp.htmlHelp(); 
  }
}

void
Version() :
{}
{
  <VERSION> WS()
  { 
    pApp.version(); 
  }
}

void
ReleaseDate() :
{}
{
  <RELEASE_DATE> WS()
  { 
    pApp.releaseDate(); 
  }
}

void
Copyright() :
{}
{
  <COPYRIGHT> WS() 
  { 
    pApp.copyright(); 
  }
}



/*------------------------------------------------------------------------------------------*/
/*   G L O B A L   O P T I O N S                                                            */
/*------------------------------------------------------------------------------------------*/

void
GlobalOpts()
  throws IllegalConfigException :
{}
{
  (RootDir() | 
   Evaluation() | Annual() | Perpetual() |
   Domain() | HomeDir() | ToolsetDir() | 
   MasterHost() | MasterPort() | NodeDir() | 
   FileHost() | FilePort() | ProdDir() | 
   ClassPath() | LibraryPath() | Lock())
  {}
}


void
Domain() :
{
  Token t;
}
{
  <DOMAIN> EQ() t=<HOSTNAME>
  { 
    pApp.setDomainName(t.image);
  }
}

void
RootDir() 
  throws IllegalConfigException :
{
  Token t;
}
{
  <ROOT_DIR> EQ() t=<PATH_ARG>
  { 
    pApp.setRootDirectory(new File(t.image));
  }
}


void
Evaluation() 
  throws IllegalConfigException :
{
  Token t;
}
{
  <EVALUATION> 
  { 
    pApp.setEvaluationLicense();
  }
}

void
Annual() 
  throws IllegalConfigException :
{
  Token t;
}
{
  <ANNUAL> 
  { 
    pApp.setAnnualLicense();
  }
}

void
Perpetual() 
  throws IllegalConfigException :
{
  Token t;
}
{
  <PERPETUAL> 
  { 
    pApp.setPerpetualLicense();
  }
}


void
HomeDir() :
{
  Token t;
}
{
  <HOME_DIR> EQ() t=<PATH_ARG>
  { 
    pApp.setHomeDirectory(new File(t.image));
  }
}

void
ToolsetDir() :
{
  Token t;
}
{
  <TOOLSET_DIR> EQ() t=<PATH_ARG>
  { 
    pApp.setToolsetDirectory(new File(t.image));
  }
}


void
MasterHost() :
{
  Token t;
}
{
  <MASTER_HOST> EQ() t=<HOSTNAME>
  { 
    pApp.setMasterHostname(t.image);
  }
}

void
MasterPort()
  throws IllegalConfigException :
{
  Token t;
}
{
  <MASTER_PORT> EQ() t=<INTEGER>
  { 
    pApp.setMasterPort(new Integer(t.image));
  }
}

void
NodeDir() :
{
  Token t;
}
{
  <NODE_DIR> EQ() t=<PATH_ARG>
  { 
    pApp.setNodeDirectory(new File(t.image));
  }
}


void
FileHost() :
{
  Token t;
}
{
  <FILE_HOST> EQ() t=<HOSTNAME>
  { 
    pApp.setFileHostname(t.image);
  }
}

void
FilePort()
  throws IllegalConfigException :
{
  Token t;
}
{
  <FILE_PORT> EQ() t=<INTEGER>
  { 
    pApp.setFilePort(new Integer(t.image));
  }
}

void
ProdDir() :
{
  Token t;
}
{
  <PROD_DIR> EQ() t=<PATH_ARG>
  { 
    pApp.setProdDirectory(new File(t.image));
  }
}


void
ClassPath() :
{
  Token t;
}
{
  <CLASS_PATH> EQ() t=<SEARCH_PATH_ARG>
  { 
    pApp.setClassPath(t.image);
  }
}

void
LibraryPath() :
{
  Token t;
}
{
  <LIBRARY_PATH> EQ() t=<SEARCH_PATH_ARG>
  { 
    pApp.setLibraryPath(t.image);
  }
}


void 
Lock() : 
{}
{
  <LOCK>
  {
    pApp.lockOutputFiles();
  }
}




/*------------------------------------------------------------------------------------------*/
/*   S H A R E D   T O K E N S                                                              */
/*------------------------------------------------------------------------------------------*/

Token
WS() :
{
  Token t;
}
{
  (t=<WS1>)
  { 
    return t; 
  }
}


Token
EQ() :
{
  Token t;
}
{
  (t=<EQ1> | t=<EQ2> | t=<EQ3> | t=<EQ4>)
  { 
    return t; 
  }
}
