options {
  STATIC = false;
}

PARSER_BEGIN(ConfigOptsParser)

package us.temerity.plconfig;

import java.util.*;
import java.util.logging.*;
import java.text.*;
import java.io.*;
import java.net.*;

/*------------------------------------------------------------------------------------------*/
/*   C O N F I G   O P T S   P A R S E R                                                    */
/*                                                                                          */
/*    The parser for the plconfig(1) Pipeline site configuration tool.                      */
/*------------------------------------------------------------------------------------------*/

public class 
ConfigOptsParser
{
  /*----------------------------------------------------------------------------------------*/
  /*   A C C E S S                                                                          */
  /*----------------------------------------------------------------------------------------*/

  /** 
   * Set the application instance. 
   */ 
  public void 
  setApp
  (
   ConfigApp app  
  ) 
  {
    if(app == null) 
      throw new IllegalArgumentException("The application cannot be (null)!");
    pApp = app;
  }


  /*----------------------------------------------------------------------------------------*/
  /*   I N T E R N A L S                                                                    */
  /*----------------------------------------------------------------------------------------*/

  /**
   * The application instance. 
   */
  private ConfigApp  pApp;

}


PARSER_END(ConfigOptsParser)

<DEFAULT> 
TOKEN :
{       
  /* information options */ 
  <HELP:                 "--help">         		    
| <HTML_HELP:      	 "--html-help">    		    
| <VERSION:        	 "--version">      		    
| <RELEASE_DATE:   	 "--release-date"> 		    
| <COPYRIGHT:      	 "--copyright">    		    
			 						    
  /* global options */				    
| <ROOT_DIR:       	 "--root-dir">          : PATH_SEP    
			 		   				    
| <EVALUATION:     	 "--evaluation">   		    
| <ANNUAL:         	 "--annual">	   		    
| <PERPETUAL:      	 "--perpetual">	   	    
			 		   				    
| <HOST_IDS:         	 "--host-ids">          : PATH_SEP
| <HOME_DIR:       	 "--home-dir">          : PATH_SEP    
| <TEMP_DIR:             "--temp-dir">          : PATH_SEP

| <MASTER_HOST:          "--master-host">       : HOSTNAME_SEP
| <MASTER_PORT:          "--master-port">       : INTEGER_SEP
| <MASTER_HEAP_SIZE:     "--master-heap-size">  : BYTE_SIZE_SEP
| <NODE_DIR:             "--node-dir">          : PATH_SEP

| <FILE_HOST:            "--file-host">         : HOSTNAME_SEP
| <FILE_PORT:            "--file-port">         : INTEGER_SEP
| <FILE_HEAP_SIZE:       "--file-heap-size">    : BYTE_SIZE_SEP
| <PROD_DIR:             "--prod-dir">          : PATH_SEP

| <QUEUE_HOST:           "--queue-host">        : HOSTNAME_SEP
| <QUEUE_PORT:           "--queue-port">        : INTEGER_SEP
| <QUEUE_HEAP_SIZE:      "--queue-heap-size">   : BYTE_SIZE_SEP
| <JOB_PORT:             "--job-port">          : INTEGER_SEP
| <QUEUE_DIR:            "--queue-dir">         : PATH_SEP

| <PLUGIN_HOST:          "--plugin-host">       : HOSTNAME_SEP
| <PLUGIN_PORT:          "--plugin-port">       : INTEGER_SEP

| <CLASS_PATH:           "--class-path">        : SEARCH_PATH_SEP
| <LIBRARY_PATH:         "--library-path">      : SEARCH_PATH_SEP 

| <PIPELINE_USER:        "--pipeline-user">     : USERNAME_SEP


  /* seperators */ 
| <WS1: ([" ","\t"])+> 

  /* errors */ 
| <UNKNOWN_OPTION:  "-" ("-")? (~[" ","\t","="])*>  : IGNORE_STATE
| <UNKNOWN_COMMAND: ~["-"," ","\t"] (~[" ","\t"])*> : IGNORE_STATE
}


/* common states */ 
<IGNORE_STATE> 
TOKEN :
{
  <IGNORED: (~[])+>
}


/* integer arguments */ 
<INTEGER_SEP> 
TOKEN :
{
  <EQ1:                   "=">   : INTEGER_STATE
| <MISSING_INTEGER_ARG: ~["="]>  : IGNORE_STATE
}

<INTEGER_STATE> 
TOKEN :
{
  <INTEGER:         (["0"-"9"])+>    : DEFAULT
| <MISSING_INTEGER: [" ","\t"]>      : IGNORE_STATE
| <ILLEGAL_INTEGER: (~[" ","\t"])+>  : IGNORE_STATE
}


/* filesystem path arguments */ 
<PATH_SEP> 
TOKEN :
{
  <EQ2:                "=">   : PATH_STATE
| <MISSING_PATH_ARG: ~["="]>  : IGNORE_STATE
}

<PATH_STATE> 
TOKEN :
{
  <PATH_ARG:       ("/")* ("../")* <PATH_ARG_COMP> 
		     ("/" (".." | (<PATH_ARG_COMP>)+)?)*>      : DEFAULT
| <#PATH_ARG_COMP: (["a"-"z","A"-"Z","0"-"9","_","-","."])*>
| <MISSING_PATH:   [" ","\t"]>                                 : IGNORE_STATE
| <ILLEGAL_PATH:   (~[" ","\t"])+>                             : IGNORE_STATE
}


/* search path arguments */ 
<SEARCH_PATH_SEP> 
TOKEN :
{
  <EQ3:                 "=">   : SEARCH_PATH_STATE
| <MISSING_SEARCH_PATH_ARG: ~["="]>  : IGNORE_STATE
}

<SEARCH_PATH_STATE> 
TOKEN :
{
  <SEARCH_PATH_ARG:       <SEARCH_PATH_DIR> ((":") <SEARCH_PATH_DIR>)*>  : DEFAULT
| <#SEARCH_PATH_DIR:      ("/")* ("../")* <SEARCH_PATH_COMP> 
		            ("/" (".." | (<SEARCH_PATH_COMP>)+)?)*>         
| <#SEARCH_PATH_COMP:     (["a"-"z","A"-"Z","0"-"9","_","-","."])*>
| <MISSING_SEARCH_PATH:   [" ","\t"]>                                    : IGNORE_STATE
| <ILLEGAL_SEARCH_PATH:   (~[" ","\t"])+>                                : IGNORE_STATE
}


/* hostname arguments */ 
<HOSTNAME_SEP> 
TOKEN :
{
  <EQ4:                    "=">   : HOSTNAME_STATE
| <MISSING_HOSTNAME_ARG: ~["="]>  : IGNORE_STATE
}

<HOSTNAME_STATE> 
TOKEN :
{
  <HOSTNAME:         ((["a"-"z","A"-"Z","0"-"9","-"])+ 
		      ("." (["a"-"z","A"-"Z","0"-"9","-"])+)*)>   : DEFAULT
| <MISSING_HOSTNAME: [" ","\t"]>                              : IGNORE_STATE
| <ILLEGAL_HOSTNAME: (~[" ","\t"])+>                          : IGNORE_STATE
}


/* username arguments */ 
<USERNAME_SEP> 
TOKEN :
{
  <EQ5:                    "=">   : USERNAME_STATE
| <MISSING_USERNAME_ARG: ~["="]>  : IGNORE_STATE
}

<USERNAME_STATE> 
TOKEN :
{
  <USERNAME:         ((["a"-"z","A"-"Z"])+ 
		      (["a"-"z","A"-"Z","0"-"9"])*)>   : DEFAULT
| <MISSING_USERNAME: [" ","\t"]>                       : IGNORE_STATE
| <ILLEGAL_USERNAME: (~[" ","\t"])+>                   : IGNORE_STATE
}


/* byte size arguments */ 
<BYTE_SIZE_SEP> 
TOKEN :
{
  <EQ6:                     "=">   : BYTE_SIZE_STATE
| <MISSING_BYTE_SIZE_ARG: ~["="]>  : IGNORE_STATE
}

<BYTE_SIZE_STATE> 
TOKEN :
{
  <BYTE_SIZE:         (["0"-"9"])+>   
| <KILO:              ["k","K"]>                      : DEFAULT
| <MEGA:              ["m","M"]>                      : DEFAULT
| <GIGA:              ["g","G"]>                      : DEFAULT
| <MISSING_BYTE_SIZE: [" ","\t"]>                     : IGNORE_STATE
| <ILLEGAL_BYTE_SIZE: (~["k","K","m","M","g","G"])+>  : IGNORE_STATE
}



/*------------------------------------------------------------------------------------------*/
/*   T O P   L E V E L                                                                      */
/*------------------------------------------------------------------------------------------*/

void
CommandLine()
  throws IllegalConfigException :
{}
{
  (InformationOpts() | Commands()) <EOF>
  {}
}


void 
Commands() 
  throws IllegalConfigException :
{}   
{
  (GlobalOpts() WS())*
  {}
}
    


/*------------------------------------------------------------------------------------------*/
/*   I N F O R M A T I O N   O P T I O N S                                                  */
/*------------------------------------------------------------------------------------------*/

void
InformationOpts() :
{}
{
  (Help() | HtmlHelp() | Version() | ReleaseDate() | Copyright())
  {
    System.exit(0);
  }
}

void
Help() : 
{}
{
  <HELP> WS()
  { 
    pApp.help(); 
  }
}

void
HtmlHelp() : 
{}
{
  <HTML_HELP> WS()
  { 
    pApp.htmlHelp(); 
  }
}

void
Version() :
{}
{
  <VERSION> WS()
  { 
    pApp.version(); 
  }
}

void
ReleaseDate() :
{}
{
  <RELEASE_DATE> WS()
  { 
    pApp.releaseDate(); 
  }
}

void
Copyright() :
{}
{
  <COPYRIGHT> WS() 
  { 
    pApp.copyright(); 
  }
}



/*------------------------------------------------------------------------------------------*/
/*   G L O B A L   O P T I O N S                                                            */
/*------------------------------------------------------------------------------------------*/

void
GlobalOpts()
  throws IllegalConfigException :
{}
{
  (RootDir() | 
   Evaluation() | Annual() | Perpetual() |
   HostIDs() | HomeDir() | TempDir() | 
   MasterHost() | MasterPort() | MasterHeapSize() | NodeDir() | 
   FileHost() | FilePort() | FileHeapSize() | ProdDir() | 
   QueueHost() | QueuePort() | QueueHeapSize() | JobPort() | QueueDir() | 
   PluginHost() | PluginPort() | 
   ClassPath() | LibraryPath() | 
   PipelineUser()) 
  {}
}


void
HostIDs()
  throws IllegalConfigException :
{
  Token t;
}
{
  <HOST_IDS> EQ() t=<PATH_ARG>
  { 
    pApp.readHostIDs(new File(t.image));
  }
}


void
RootDir() 
  throws IllegalConfigException :
{
  Token t;
}
{
  <ROOT_DIR> EQ() t=<PATH_ARG>
  { 
    pApp.setRootDirectory(new File(t.image));
  }
}


void
Evaluation() 
  throws IllegalConfigException :
{
  Token t;
}
{
  <EVALUATION> 
  { 
    pApp.setEvaluationLicense();
  }
}

void
Annual() 
  throws IllegalConfigException :
{
  Token t;
}
{
  <ANNUAL> 
  { 
    pApp.setAnnualLicense();
  }
}

void
Perpetual() 
  throws IllegalConfigException :
{
  Token t;
}
{
  <PERPETUAL> 
  { 
    pApp.setPerpetualLicense();
  }
}


void
HomeDir() :
{
  Token t;
}
{
  <HOME_DIR> EQ() t=<PATH_ARG>
  { 
    pApp.setHomeDirectory(new File(t.image));
  }
}

void
TempDir() :
{
  Token t;
}
{
  <TEMP_DIR> EQ() t=<PATH_ARG>
  { 
    pApp.setTemporaryDirectory(new File(t.image));
  }
}


void
MasterHost() :
{
  Token t;
}
{
  <MASTER_HOST> EQ() t=<HOSTNAME>
  { 
    pApp.setMasterHostname(t.image);
  }
}

void
MasterPort()
  throws IllegalConfigException :
{
  Token t;
}
{
  <MASTER_PORT> EQ() t=<INTEGER>
  { 
    pApp.setMasterPort(new Integer(t.image));
  }
}

void
MasterHeapSize()
  throws IllegalConfigException :
{
  long size;
}
{
  <MASTER_HEAP_SIZE> EQ() size=ByteSize()
  { 
    pApp.setMasterHeapSize(size);
  }
}

void
NodeDir() :
{
  Token t;
}
{
  <NODE_DIR> EQ() t=<PATH_ARG>
  { 
    pApp.setNodeDirectory(new File(t.image));
  }
}


void
FileHost() :
{
  Token t;
}
{
  <FILE_HOST> EQ() t=<HOSTNAME>
  { 
    pApp.setFileHostname(t.image);
  }
}

void
FilePort()
  throws IllegalConfigException :
{
  Token t;
}
{
  <FILE_PORT> EQ() t=<INTEGER>
  { 
    pApp.setFilePort(new Integer(t.image));
  }
}

void
FileHeapSize()
  throws IllegalConfigException :
{
  long size;
}
{
  <FILE_HEAP_SIZE> EQ() size=ByteSize()
  { 
    pApp.setFileHeapSize(size);
  }
}

void
ProdDir() :
{
  Token t;
}
{
  <PROD_DIR> EQ() t=<PATH_ARG>
  { 
    pApp.setProdDirectory(new File(t.image));
  }
}


void
QueueHost() :
{
  Token t;
}
{
  <QUEUE_HOST> EQ() t=<HOSTNAME>
  { 
    pApp.setQueueHostname(t.image);
  }
}

void
QueuePort()
  throws IllegalConfigException :
{
  Token t;
}
{
  <QUEUE_PORT> EQ() t=<INTEGER>
  { 
    pApp.setQueuePort(new Integer(t.image));
  }
}

void
QueueHeapSize()
  throws IllegalConfigException :
{
  long size;
}
{
  <QUEUE_HEAP_SIZE> EQ() size=ByteSize()
  { 
    pApp.setQueueHeapSize(size);
  }
}

void
JobPort()
  throws IllegalConfigException :
{
  Token t;
}
{
  <JOB_PORT> EQ() t=<INTEGER>
  { 
    pApp.setJobPort(new Integer(t.image));
  }
}

void
QueueDir() :
{
  Token t;
}
{
  <QUEUE_DIR> EQ() t=<PATH_ARG>
  { 
    pApp.setQueueDirectory(new File(t.image));
  }
}



void
PluginHost() :
{
  Token t;
}
{
  <PLUGIN_HOST> EQ() t=<HOSTNAME>
  { 
    pApp.setPluginHostname(t.image);
  }
}

void
PluginPort()
  throws IllegalConfigException :
{
  Token t;
}
{
  <PLUGIN_PORT> EQ() t=<INTEGER>
  { 
    pApp.setPluginPort(new Integer(t.image));
  }
}


void
ClassPath() :
{
  Token t;
}
{
  <CLASS_PATH> EQ() t=<SEARCH_PATH_ARG>
  { 
    pApp.setClassPath(t.image);
  }
}

void
LibraryPath() :
{
  Token t;
}
{
  <LIBRARY_PATH> EQ() t=<SEARCH_PATH_ARG>
  { 
    pApp.setLibraryPath(t.image);
  }
}




void
PipelineUser() 
  throws IllegalConfigException :
{
  Token t;
}
{
  <PIPELINE_USER> EQ() t=<USERNAME>
  { 
    pApp.setPipelineUser(t.image);
  }
}



long 
ByteSize()
  throws IllegalConfigException :
{
  Token t; 
  long scale = 1L;
}
{
  t=<BYTE_SIZE> (scale=Kilo() | scale=Mega() | scale=Giga())?
  {
    try {
      return Long.parseLong(t.image) * scale;
    }
    catch(NumberFormatException ex) {
      throw new IllegalConfigException(ex.getMessage());
    }
  }
}

long 
Kilo() :
{}
{
  <KILO> 
  {
    return 1024L;
  }
}

long 
Mega() :
{}
{
  <MEGA> 
  {
    return 1048576L;
  }
}

long 
Giga() :
{}
{
  <GIGA> 
  {
    return 1073741824L;
  }
}


/*------------------------------------------------------------------------------------------*/
/*   S H A R E D   T O K E N S                                                              */
/*------------------------------------------------------------------------------------------*/

Token
WS() :
{
  Token t;
}
{
  (t=<WS1>)
  { 
    return t; 
  }
}


Token
EQ() :
{
  Token t;
}
{
  (t=<EQ1> | t=<EQ2> | t=<EQ3> | t=<EQ4> | t=<EQ5> | t=<EQ6>)
  { 
    return t; 
  }
}
