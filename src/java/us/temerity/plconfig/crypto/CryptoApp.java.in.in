// $Id: CryptoApp.java.in.in,v 1.7 2009/06/25 18:35:59 jim Exp $

import java.io.*;
import java.util.*;
import java.math.*;
import java.net.*;
import java.security.*;
import java.security.spec.*;
import java.security.interfaces.*;
import java.text.*;
import javax.crypto.*;
import javax.crypto.spec.*;
import javax.crypto.interfaces.*;

import us.temerity.plconfig.*; 
import us.temerity.plconfig.glue.*; 

/*------------------------------------------------------------------------------------------*/
/*   C U S T O M E R   P R O F I L E   A P P                                                */
/*------------------------------------------------------------------------------------------*/

/**
 * A utility application which decrypts an encrypted customer profile and performs various
 * cryptographic services for the Pipeline build process. <P> 
 * 
 * The encrypted customer profile <CODE>customer-profile</CODE> is generated when a customer
 * runs the <B>plconfig</B>(1) program to configure Pipeline for their site.  This customer 
 * profile file is then given as the argument to the <CODE>--with-customer-profile</CODE>
 * option to the <B>configure</B>(1) script for Pipeline.  <P> 
 * 
 * The source code for this class is itself generated during the build process for
 * <B>plconfig</B>(1) from the <CODE>CryptoApp.java.in</CODE> file so that it contains a 
 * copy of the company private key needed to decrypt the customer profile.  Once generated, 
 * this class is copied to the Pipeline source tree.
 * 
 * <H4>Usage</H4>
 * 
 * <DIV style="margin-left: 40px;"> 
 *   java [<I>java-options</I>] CryptoApp <I>customer-profile</I> [<I>options</I>] <P> 
 *   
 *   Where the (<I>customer-profile</I>) is the name of the profile generated when the  
 *   <B>plconfig</B>(1) program is run by a customer for their site.
 * </DIV> 
 * 
 * <H4>Options</H4>
 * 
 * <DIV style="margin-left: 40px;">
 *   --version <BR> 
 *   <DIV style="margin-left: 40px;">
 *     Prints the version of <B>plconfig</B>(1) and exits.
 *   </DIV> <P> 
 * 
 *   --params <BR> 
 *   <DIV style="margin-left: 40px;">
 *     Prints all of the site configuration parameters contained in (<I>customer-profile</I>) 
 *     to standard out in a (<I>name</I> = <I>value</I>) format and exits.
 *   </DIV> <P> 
 * 
 *   --param-names <BR> 
 *   <DIV style="margin-left: 40px;">
 *     Prints the names of all of the site configuration parameters in 
 *     (<I>customer-profile</I>) to standard out and exits.
 *   </DIV> <P> 
 * 
 *   --lookup <I>parameter-name</I> <BR> 
 *   <DIV style="margin-left: 40px;">
 *     Prints the value of the site configuration parameter with the given name 
 *     (<I>parameter-name</I>) contained in (<I>customer-profile</I>) to standard out and 
 *     exits.
 *   </DIV> <P> 
 * 
 *   --usage-stats <BR> 
 *   <DIV style="margin-left: 40px;">
 *     Writes several GLUE format files to the current directory which contains the usage
 *     statistics embeded in the (<I>customer-profile</I>).  
 *     and exits.
 *   </DIV> <P> 
 * 
 *   --encrypt <I>source-file</I> <I>target-file</I> <BR> 
 *   <DIV style="margin-left: 40px;">
 *     Encrypts the (<I>source-file</I>) using the companies private key and the customers 
 *     public key contained in (<I>customer-profile</I>) and writes the encrypted result to 
 *     (<I>target-file</I>).
 *   </DIV> <P> 
 * 
 *   --build-vault <I>source-list</I> <I>vault-file</I><BR> 
 *   <DIV style="margin-left: 40px;">
 *     Encrypts and archives one or more input files (<I>source-file</I>) to build a
 *     monolithic output file (<I>vault-file</I>).  Finally, the information needed to decrypt
 *     the vault is printed to standard out encoded as Java source code field definitions.
 *   </DIV> <P> 
 * 
 *   --decrypt <I>source-file</I> <I>target-file</I> <BR> 
 *   <DIV style="margin-left: 40px;">
 *     Decrypts the encrypted (<I>source-file</I>) using the companies private key and the 
 *     customers public key contained in (<I>customer-profile</I>) and writes the decrypted 
 *     result to (<I>target-file</I>).
 *   </DIV> 
 * </DIV> <P> 
 */ 
public
class CryptoApp
{  
  /*----------------------------------------------------------------------------------------*/
  /*   M A I N                                                                              */
  /*----------------------------------------------------------------------------------------*/

  /**
   * The top-level application method.
   */ 
  public static void 
  main
  (
   String[] args  
  )
  {
    CryptoApp app = new CryptoApp(args);
    app.run();
  }



  /*----------------------------------------------------------------------------------------*/
  /*   C O N S T R U C T O R                                                                */
  /*----------------------------------------------------------------------------------------*/
  
  /**
   * Construct the <CODE>PackageInfo</CODE> generator application with the given 
   * command-line arguments.
   * 
   * @param args 
   *   The command-line arguments.
   */ 
  public
  CryptoApp
  ( 
   String[] args
  )
  {
    switch(args.length) {
    case 1: 
      if(args[0].equals("--version")) 
	pVersionOpt = true;
      else
	usage();
      break;

    case 2:
      if(args[1].equals("--params")) 
	pParamsOpt = true;
      else if(args[1].equals("--param-names")) 
	pParamNamesOpt = true;
      else if(args[1].equals("--usage-stats")) 
	pUsageStatsOpt = true;
      else 
	usage();
      break;

    case 3:
      if(args[1].equals("--lookup")) {
	pLookupOpt = true;
	pLookupArg = args[2];
      }
      else 
	usage();
      break;

    case 4:
      if(args[1].equals("--encrypt")) {
	pEncryptOpt = true;
	pCryptSource = new File(args[2]);
	pCryptTarget = new File(args[3]);
      }
      else if(args[1].equals("--decrypt")) {
	pDecryptOpt = true;
	pCryptSource = new File(args[2]);
	pCryptTarget = new File(args[3]);
      }
      else if(args[1].equals("--build-vault")) {
	pBuildVaultOpt = true;
	pVaultSources = new ArrayList<File>();
	try {
	  FileReader in = new FileReader(args[2]);

	  StringBuffer buf = new StringBuffer();
	  char[] cs = new char[4096];
	  while(true) {
	    int cnt = in.read(cs);
	    if(cnt == -1) 
	      break;
	    
	    buf.append(cs, 0, cnt);
	  }

	  in.close();
	  
	  String sources[] = buf.toString().split("\\p{Space}");
	  int wk;
	  for(wk=0; wk<sources.length; wk++) 
	    pVaultSources.add(new File(sources[wk]));
	}
	catch(IOException ex) {
	  System.out.print
	    ("IO problems reading vault list file (" + args[2] + "):\n" + 
	     ex.getMessage() + "\n");
	  System.exit(1);
	}

	pVaultTarget = new File(args[3]);
      }
      else 
	usage();
      break;

    default:
      usage();
    }
      
    if(!pVersionOpt) {
      File file = new File(args[0]);
      if(!file.isFile()) {
	System.out.print("The customer profile input file (" + file + ") does not exist!\n");
	System.exit(1);
      }
      
      pProfileFile = file;
    }    
    
    pParams = new TreeMap<String,Object>();
  }
    
  private void 
  usage() 
  {
    System.out.print
      ("USAGE:\n" + 
       "  java [java-options] CryptoApp customer-profile [options]\n" + 
       "\n" + 
       "  java [java-options] CryptoApp --version\n" + 
       "\n" + 
       "OPTIONS:\n" +
       "  --params\n" + 
       "  --param-names\n" + 
       "  --lookup parameter-name\n" + 
       "  --usage-stats\n" + 
       "  --build-vault source-file1 [source-file2 ...] target-file\n" +
       "  --encrypt source-file target-file\n" + 
       "  --decrypt source-file target-file\n\n");
    
    System.exit(1);
  }

  
  /*----------------------------------------------------------------------------------------*/
  /*   R U N                                                                                */
  /*----------------------------------------------------------------------------------------*/
  
  /**
   * The top-level method of the application. <P> 
   */
  public void
  run()
  {
    if(pVersionOpt) {
      System.out.print("@VERSION@");
      System.exit(0);
    }

    try {
      read();
    }
    catch(Exception ex) {
      System.out.print("Unable to read the customer profile from (" + pProfileFile + ")!\n"); 
      System.exit(1);     
    }

    if(pParamsOpt) {
      for(String title : pParams.keySet()) {
        if(!title.equals("DailyUsers") && !title.equals("UserDays")) {
          System.out.print(title + " = ");
          if(title.equals("HostIDs")) {
            System.out.print("\n");
            
            TreeMap<String,BigInteger> hostIDs = 
              (TreeMap<String,BigInteger>) pParams.get("HostIDs");
            for(String host : hostIDs.keySet()) {
              BigInteger cksum = hostIDs.get(host);
              
              System.out.print("  " + host + " ");
              
              int wk;
              for(wk=0; wk<(29 - host.length()); wk++) 
                System.out.print(" ");
              
              System.out.print(cksum);
              System.out.print("\n");    
            }
          }
          else if(title.equals("UnixLocalJavaLibraries") || 
                  title.equals("MacLocalJavaLibraries") || 
                  title.equals("WinLocalJavaLibraries")) {
            System.out.print("\n");
            LinkedList<String> libs = (LinkedList<String>) pParams.get(title);
            for(String lib : libs) 
              System.out.print("  " + lib + "\n"); 
          }
          else {
            System.out.print(pParams.get(title) + "\n");
          }
        }
      }
    }
    else if(pParamNamesOpt) {
      for(String title : pParams.keySet()) 
	System.out.print(title + "\n");
    }
    else if(pLookupOpt) {
      if(pLookupArg.equals("HostIDs")) {
	TreeMap<String,BigInteger> hostIDs = 
	  (TreeMap<String,BigInteger>) pParams.get("HostIDs");
	for(String host : hostIDs.keySet()) {
	  BigInteger cksum = hostIDs.get(host);
	  
	  System.out.print(host + " ");
	  
	  int wk;
	  for(wk=0; wk<(29 - host.length()); wk++) 
	    System.out.print(" ");
	  
          System.out.print(cksum);
          System.out.print("\n");    
	}
      }
      else if(pLookupArg.equals("UnixLocalJavaLibraries") || 
              pLookupArg.equals("MacLocalJavaLibraries")) {
        LinkedList<String> libs = (LinkedList<String>) pParams.get(pLookupArg);
        for(String lib : libs) 
          System.out.print(":" + lib); 
        System.out.print("\n"); 
      }
      else if(pLookupArg.equals("WinLocalJavaLibraries")) {
        LinkedList<String> libs = (LinkedList<String>) pParams.get(pLookupArg);
        for(String lib : libs) 
          System.out.print(";" + lib); 
        System.out.print("\n"); 
      }
      else {
	System.out.print(pParams.get(pLookupArg) + "\n");
      }
    }
    else if(pUsageStatsOpt) {
      TreeMap<Long,Integer> dailyUsers = (TreeMap<Long,Integer>) pParams.get("DailyUsers");
      if(dailyUsers == null) {
        System.out.print("No Daily User counts were found in the customer site profile!\n"); 
      }
      else {
        File file = new File("./daily-users.glue"); 
        try {
          GlueEncoder ge = new GlueEncoderImpl("DailyUsers", dailyUsers);
          String glue = ge.getText();
          
          FileWriter out = new FileWriter(file); 
          out.write(glue);
          out.flush();
          out.close();
        }
        catch(Exception ex) {
          System.out.print
            ("Unable to generate (" + file + ") containing the GLUE format representation " + 
             "of the Daily User counts!\n"); 
        }
      }

      TreeMap<String,Integer> userDays = (TreeMap<String,Integer>) pParams.get("UserDays"); 
      if(userDays == null) {
        System.out.print("No User Day counts were found in the customer site profile!\n"); 
      }
      else {
        File file = new File("./user-days.glue"); 
        try {
          GlueEncoder ge = new GlueEncoderImpl("UserDays", userDays);
          String glue = ge.getText();
          
          FileWriter out = new FileWriter(file); 
          out.write(glue);
          out.flush();
          out.close();
        }
        catch(Exception ex) {
          System.out.print
            ("Unable to generate (" + file + ") containing the GLUE format representation " + 
             "of the User Day counts!\n"); 
        }
      }
    }
    else if(pBuildVaultOpt) {
      buildVault();
    }
    else if(pEncryptOpt) {
      encrypt();
    }
    else if(pDecryptOpt) {
      decrypt();
    }
    else 
      assert(false);

    System.exit(0);
  }




  /*----------------------------------------------------------------------------------------*/
  /*   I / O                                                                                */
  /*----------------------------------------------------------------------------------------*/
  
  /**
   * Read the customer profile.
   */
  private void 
  read()
    throws NoSuchAlgorithmException, 
           InvalidAlgorithmParameterException, 
           InvalidParameterSpecException,
           InvalidKeySpecException, 
           InvalidKeyException, 
           NoSuchPaddingException, 
           BadPaddingException, 
           IllegalBlockSizeException, 
           ClassNotFoundException,
           IOException
  {  
    /* retrieve the customers public key and encrypted profile */ 
    PublicKey publicKey = null;
    BigInteger encrypted = null;
    {
      FileReader in = new FileReader(pProfileFile);
      
      int keySize = 0;
      {
	char cs[] = new char[4];
	in.read(cs, 0, cs.length);
	keySize = Integer.valueOf(new String(cs));
      }

      {
	char cs[] = new char[keySize];
	in.read(cs, 0, cs.length);
	
	BigInteger big = new BigInteger(new String(cs));
	byte bytes[] = big.toByteArray();
	
	KeyFactory factory = KeyFactory.getInstance("DH");
	X509EncodedKeySpec spec = new X509EncodedKeySpec(bytes);
	publicKey = factory.generatePublic(spec);
      }

      {
	StringBuffer buf = new StringBuffer();
	char cs[] = new char[1024];
	while(true) {
	  int size = in.read(cs);
	  if(size == -1)
	    break;
	  
	  buf.append(cs, 0, size);
	}

	encrypted = new BigInteger(buf.toString());
      }

      in.close();
    }

    /* decrypt the profile */ 
    TreeMap<String,Object> profile = null;
    {
      /* retrieve the company's private key */ 
      PrivateKey privateKey = null;
      {
	BigInteger big = new BigInteger(sCompanyPrivateKey);
	KeyFactory factory = KeyFactory.getInstance("DH");
	PKCS8EncodedKeySpec spec = new PKCS8EncodedKeySpec(big.toByteArray());
	privateKey = factory.generatePrivate(spec);
      }
      
      /* use the customers public key and the companies private key to create a DES key */ 
      {
	KeyAgreement keyAgree = KeyAgreement.getInstance("DH");
	keyAgree.init(privateKey);
	keyAgree.doPhase(publicKey, true);
	pKey = keyAgree.generateSecret("DES");
      }
	
      /* decrpyt the profile text */ 
      Cipher decipher = Cipher.getInstance("DES/ECB/PKCS5Padding");
      decipher.init(Cipher.DECRYPT_MODE, pKey);
      byte raw[] = decipher.doFinal(encrypted.toByteArray());

      /* convert the raw bytes into the site parameters table */ 
      {
	ByteArrayInputStream bin = new ByteArrayInputStream(raw);

	ObjectInputStream in = new ObjectInputStream(bin);
	pParams = (TreeMap<String,Object>) in.readObject();
	in.close();
      }
    }
  }

  /**
   * Encrypts and archives one or more input files to build a monolithic output file.
   */
  private void 
  buildVault()
  {
    try {
      byte buf[] = new byte[65536];
	
      {
	Cipher cipher = Cipher.getInstance("DES/ECB/PKCS5Padding");
	cipher.init(Cipher.ENCRYPT_MODE, pKey);
	CipherOutputStream out =  
	  new CipherOutputStream(new FileOutputStream(pVaultTarget), cipher);
	
	for(File source : pVaultSources) {
	  
	  ByteArrayOutputStream bout = new ByteArrayOutputStream();
	  {
	    FileInputStream in = new FileInputStream(source);
	    
	    while(true) {
	      int num = in.read(buf);
	      if(num == -1) 
		break;
	      bout.write(buf, 0, num);
	    }
	    
	    in.close();
	  }

	  String path = source.getPath();
	  assert(path.endsWith(".class"));
	  String cname = 
	    ("us.temerity.pipeline." + path.substring(0, path.length()-6).replace('/', '.'));

	  out.write(String.format("%09d", cname.length()).getBytes());
	  out.write(cname.getBytes());
	  
	  byte bytes[] = bout.toByteArray();
	  out.write(String.format("%09d", bytes.length).getBytes());
	  out.write(bytes);
	}
	
	out.close();
      }

      byte checksum[] = null;
      {
	FileInputStream in = new FileInputStream(pVaultTarget);
	MessageDigest digest = MessageDigest.getInstance("MD5");

	while(true) {
	  int num = in.read(buf);
	  if(num == -1) 
	    break;
	  digest.update(buf, 0, num);
	}

	checksum = digest.digest();
      }

      System.out.print
	("  private static final String sCheckSum = \n" + 
	 "    \"" + (new BigInteger(checksum)) + "\";\n" +
	 "\n" +
	 "  private static final String sData = \n" + 
	 "    \"" + sCompanyPublicKey + "\";\n");
    }
    catch(Exception ex) {
      ex.printStackTrace(System.err);
      System.err.print("Unable to build the enrypted vault!\n"); 
      System.exit(1);     
    }
  }

  /**
   * Encrypt a file using the companies private key and the customers public key contained 
   * in the customer profile.
   */
  private void 
  encrypt()
  {
    try {
      FileInputStream in = new FileInputStream(pCryptSource);

      Cipher cipher = Cipher.getInstance("DES/ECB/PKCS5Padding");
      cipher.init(Cipher.ENCRYPT_MODE, pKey);
      CipherOutputStream out =  
	new CipherOutputStream(new FileOutputStream(pCryptTarget), cipher);

      byte buf[] = new byte[1024];
      while(true) {
	int num = in.read(buf);
	if(num == -1) 
	  break;
	out.write(buf, 0, num);
      }

      in.close();
      out.close();
    }
    catch(Exception ex) {
      System.out.print
	("Unable to encrypt the source file (" + pCryptSource + ") to generate the " +
	 "target file (" + pCryptTarget + ")!\n"); 
      System.exit(1);     
    }
  }

  /**
   * Decrypt a file using the companies private key and the customers public key contained 
   * in the customer profile.
   */
  private void 
  decrypt() 
  {
    try {
      Cipher decipher = Cipher.getInstance("DES/ECB/PKCS5Padding");
      decipher.init(Cipher.DECRYPT_MODE, pKey);
      CipherInputStream in =  
	new CipherInputStream(new FileInputStream(pCryptSource), decipher);

      FileOutputStream out = new FileOutputStream(pCryptTarget);

      byte buf[] = new byte[1024];
      while(true) {
	int num = in.read(buf);
	if(num == -1) 
	  break;
	out.write(buf, 0, num);
      }

      in.close();
      out.close();
    }
    catch(Exception ex) {
      System.out.print
	("Unable to encrypt the source file (" + pCryptSource + ") to generate the " +
	 "target file (" + pCryptTarget + ")!\n"); 
      System.exit(1);     
    }
  }



  /*----------------------------------------------------------------------------------------*/
  /*   S T A T I C   I N T E R N A L S                                                      */
  /*----------------------------------------------------------------------------------------*/

  @COMPANY_KEY_FIELDS@


  /*----------------------------------------------------------------------------------------*/
  /*   I N T E R N A L S                                                                    */
  /*----------------------------------------------------------------------------------------*/

  /**
   * The input encrypted customer profile file.
   */ 
  private File  pProfileFile;

  /**
   * Whether the --version option was given.
   */
  private boolean  pVersionOpt;

  /**
   * Whether the --params option was given.
   */
  private boolean  pParamsOpt;

  /**
   * Whether the --param-names option was given.
   */
  private boolean  pParamNamesOpt;

  /**
   * Whether the --lookup option was given.
   */
  private boolean  pLookupOpt;

  /**
   * Whether the --usage-stats option was given.
   */
  private boolean  pUsageStatsOpt;

  /**
   * The name of the site configuration parameter to lookup.
   */
  private String  pLookupArg;


  /**
   * Whether the --build-vault option was given.
   */
  private boolean  pBuildVaultOpt;

  /**
   * The input files for the vault.
   */
  private ArrayList<File> pVaultSources;

  /**
   * The vault output file.
   */
  private File  pVaultTarget;


  /**
   * Whether the --encrypt option was given.
   */
  private boolean  pEncryptOpt;

  /**
   * Whether the --decrypt option was given.
   */
  private boolean  pDecryptOpt;

  /**
   * The input file to encrypt/decrypt.
   */
  private File  pCryptSource;

  /**
   * The output file of encrypt/decrypt
   */
  private File  pCryptTarget;


  /**
   * The site configuration parameters extracted from the customer profile.
   */ 
  private TreeMap<String,Object>  pParams;

  /**
   * The key used to encrypt/decrypt data.
   */
  private SecretKey pKey;

}


